AWSTemplateFormatVersion: '2010-09-09'

Description: 'OpenSCAP AWS Deployment Example'

Metadata:

  AWS::CloudFormation::Interface:

    ParameterGroups:

      - Label:
          default: 'Example Configuration'
        Parameters:
          - S3BucketName
          - ServerCount
          - NotificationEmail

      - Label:
          default: 'Network Configuration'
        Parameters:
          - VpcId
          - SubnetId
          - EC2KeyPair
          - AllowedIPs

    ParameterLabels:
      AllowedIPs:
        default: 'SSH Allowed IPs'
      EC2KeyPair:
        default: 'EC2 Key Pair Name'
      NotificationEmail:
        default: 'Notification Email'
      S3BucketName:
        default: 'S3 Bucket Name'
      ServerCount:
        default: 'Server Count'
      VpcId:
        default: 'VPC ID'
      SubnetId:
        default: 'Subnet ID'

Parameters:

  AllowedIPs:
    Description: 'IPs allowed to connect - https://checkip.amazonaws.com'
    Type: String
    Default: '0.0.0.0/0'

  EC2KeyPair:
    Description: 'SSH key pair'
    Type: AWS::EC2::KeyPair::KeyName

  NotificationEmail:
    Description: '(Optional) Email notifications of scan failures'
    Type: String
    Default: ''

  S3BucketName:
    Description: 'The name of an existing S3 bucket'
    Type: String

  ServerCount:
    Description: 'The number of servers to scan'
    Type: Number
    MinValue: 1
    Default: 3

  SubnetId:
    Description: 'The Subnet into which the servers will be launched'
    Type: AWS::EC2::Subnet::Id

  VpcId:
    Description: 'The VPC into which the servers will be launched'
    Type: AWS::EC2::VPC::Id

Mappings:

  AWSAMIRegionMap:
    AMI:
      CENTOS7HVM: 'CentOS Linux 7 x86_64 HVM EBS ENA 1803_01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-8274d6ff.4'
    ap-northeast-1:
      CENTOS7HVM: 'ami-91c4d3ed'
    ap-northeast-2:
      CENTOS7HVM: 'ami-995cf3f7'
    ap-south-1:
      CENTOS7HVM: 'ami-2014314f'
    ap-southeast-1:
      CENTOS7HVM: 'ami-16a4fe6a'
    ap-southeast-2:
      CENTOS7HVM: 'ami-dda36dbf'
    ca-central-1:
      CENTOS7HVM: 'ami-7263e516'
    eu-central-1:
      CENTOS7HVM: 'ami-2882ddc3'
    eu-west-1:
      CENTOS7HVM: 'ami-1caef165'
    eu-west-2:
      CENTOS7HVM: 'ami-4f02e328'
    eu-west-3:
      CENTOS7HVM: 'ami-4219af3f'
    sa-east-1:
      CENTOS7HVM: 'ami-2a5b0d46'
    us-east-1:
      CENTOS7HVM: 'ami-b81dbfc5'
    us-east-2:
      CENTOS7HVM: 'ami-994575fc'
    us-west-1:
      CENTOS7HVM: 'ami-78485818'
    us-west-2:
      CENTOS7HVM: 'ami-0ebdd976'

Conditions:

  CreateSubscription: !Not [ !Equals [ !Ref NotificationEmail, '' ] ]

Resources:

  NotificationTopic:
    Type: 'AWS::SNS::Topic'

  NotificationTopicSubscription:
    Type: 'AWS::SNS::Subscription'
    Condition: CreateSubscription
    Properties:
      Subscription:
        - Endpoint: !Ref NotificationEmail
          Protocol: email

  SecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VpcId
      GroupDescription: 'Allow traffic to instances'
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: !Ref AllowedIPs

  AutoScalingGroup:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      LaunchConfigurationName: !Ref LaunchConfig
      MinSize: !Ref ServerCount
      MaxSize: !Ref ServerCount
      DesiredCapacity: !Ref ServerCount
      VPCZoneIdentifier:
        - !Ref SubnetId
      Tags:
        - PropagateAtLaunch: true
          Value: 'OpenSCAP Demo Server'
          Key: Name

  LaunchConfig:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Properties:
      KeyName: !Ref EC2KeyPair
      ImageId: !FindInMap [ AWSAMIRegionMap, !Ref 'AWS::Region', CENTOS7HVM ]
      SecurityGroups:
        - !Ref SecurityGroup
      InstanceType: 't2.micro'
      IamInstanceProfile: !Ref OpenScapServerProfile
      UserData:
        Fn::Base64: !Sub |
          #!/usr/bin/env bash

          # We're installing the AWS CLI using an RPM from EPEL. Could also use pip if we wanted the latest version
          yum install -y epel-release
          yum install -y awscli

          # This is a quick but not ideal way of installing. An RPM repo with your custom packages would be better.
          aws s3 sync s3://${S3BucketName} /tmp --exclude '*' --include '*.rpm'
          yum install -y /tmp/openscap-aws-*.rpm

          # Update the default configuration file with the ARN of our SNS topic
          sed -i "s/SNS_TOPIC_ARN=/SNS_TOPIC_ARN=${NotificationTopic}/" /opt/openscap-aws/etc/openscap-aws.conf

          # Overwrite custom scan rules configuration with file uploaded to the S3 bucket
          aws s3 sync s3://${S3BucketName} /opt/openscap-aws/etc --exclude '*' --include 'aws-cloud-tailored.xml'

          # You might want to schedule this differently, this randomizes scans throughout the day
          echo "$(shuf -i 0-59 -n 1) $(shuf -i 0-23 -n 1) * * * root /opt/openscap-aws/scan.sh" > /etc/cron.d/openscap-aws

          # This is just for the demo, run a scan a few minutes after starting to populate the CloudWatch custom metric
          yum -y install at
          systemctl start atd
          echo "/opt/openscap-aws/scan.sh" | at now + $(shuf -i 2-7 -n 1) min

  # ~~~ Allow servers to read from configuration S3 bucket and write to CloudWatch and SNS

  OpenScapServerProfile:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Roles:
        - !Ref OpenScapServerServerRole

  OpenScapServerServerRole:
    Type: 'AWS::IAM::Role'
    Properties:
      Policies:
        - PolicyName: 'ListConfigBucket'
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action: 's3:ListBucket'
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}'
        - PolicyName: 'ReadConfigBucket'
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${S3BucketName}/*'
        - PolicyName: 'PublishToCloudWatch'
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action: 'cloudwatch:PutMetricData'
                Resource: '*'
        - PolicyName: 'PublishToSNS'
          PolicyDocument:
            Statement:
              - Effect: 'Allow'
                Action: 'SNS:Publish'
                Resource: !Ref NotificationTopic
      AssumeRolePolicyDocument:
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'